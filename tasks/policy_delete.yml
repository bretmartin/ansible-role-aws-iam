---

- name: set IAM managed policy path fact
  set_fact:
    _aws_iam_policy_path: >-
      {{ _aws_iam_existing_policies[_aws_iam_policy_name]["Path"] }}

- name: set IAM managed policy ARN fact
  set_fact:
    _aws_iam_policy_arn: >-
      arn:aws:iam::{{ aws_account }}:policy{{
        _aws_iam_policy_path }}{{ _aws_iam_policy_name }}

- name: set IAM managed policy facts
  set_fact:
    _aws_iam_p: 'IAM managed policy {{ _aws_iam_policy_name }}'
    _aws_iam_purl: >-
      https://console.aws.amazon.com/iam/home#policies/{{ _aws_iam_policy_arn }}

- name: set IAM managed policy attached entities fact
  set_fact:
    _aws_iam_policy_attached_entities: >
      {{ _aws_iam_aad
         | json_query("{
                          PolicyGroups:
                            GroupDetailList[?AttachedManagedPolicies
                            [?PolicyArn == `" + _aws_iam_policy_arn + "`]]
                            .{GroupName: GroupName, GroupId: GroupId},
                          PolicyUsers:
                            UserDetailList[?AttachedManagedPolicies
                            [?PolicyArn == `" + _aws_iam_policy_arn + "`]]
                            .{UserName: UserName, UserId: UserId},
                          PolicyRoles:
                            RoleDetailList[?AttachedManagedPolicies
                            [?PolicyArn == `" + _aws_iam_policy_arn + "`]]
                            .{RoleName: RoleName, RoleId: RoleId}
                       }") }}

- name: detach groups from IAM managed policy
  command: >
    aws iam detach-group-policy
            --group-name '{{ item }}'
            --policy-arn '{{ _aws_iam_policy_arn }}'
            --profile '{{ aws_profile }}'
  with_items: >
    {{ _aws_iam_policy_attached_entities["PolicyGroups"]
       | map(attribute="GroupName") | list }}

- name: detach users from IAM managed policy
  command: >
    aws iam detach-user-policy
            --user-name '{{ item }}'
            --policy-arn '{{ _aws_iam_policy_arn }}'
            --profile '{{ aws_profile }}'
  with_items: >
    {{ _aws_iam_policy_attached_entities["PolicyUsers"]
       | map(attribute="UserName") | list }}

- name: detach roles from IAM managed policy
  command: >
    aws iam detach-role-policy
            --role-name '{{ item }}'
            --policy-arn '{{ _aws_iam_policy_arn }}'
            --profile '{{ aws_profile }}'
  with_items: >
    {{ _aws_iam_policy_attached_entities["PolicyRoles"]
       | map(attribute="RoleName") | list }}


- name: set all non-default IAM managed policy versions fact
  set_fact:
    _aws_iam_existing_policy_nondefault_versions: >
      {{ _aws_iam_aad
         | json_query("Policies"
                      + "[?Arn == `" + _aws_iam_policy_arn + "`]"
                      + ".PolicyVersionList"
                      + "[?IsDefaultVersion == `false`].VersionId") }}

- name: delete all non-default IAM managed policy versions
  command: >
    aws iam delete-policy-version
            --policy-arn '{{ _aws_iam_policy_arn }}'
            --version-id '{{ item }}'
            --profile '{{ aws_profile }}'
  with_items: '{{ _aws_iam_existing_policy_nondefault_versions }}'


- name: remove {{ _aws_iam_p }}
  command: >
    aws iam delete-policy
            --policy-arn '{{ _aws_iam_policy_arn }}'
            --profile '{{ aws_profile }}'

- name: call optional notifier
  include_tasks: 'roles/{{ notifier_role }}/tasks/main.yml'
  vars:
    message: >
      deleted <b>{{ _aws_iam_p }}</b>
      from <a href="{{ _aws_iam_url }}">account {{ aws_profile }}</a>
  when: >
    notifier_role is defined
